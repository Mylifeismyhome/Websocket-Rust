/* automatically generated by rust-bindgen 0.71.1 */

pub const _STL_COMPILER_PREPROCESSOR: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 1;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_CXX26: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const _STL_WARNING_LEVEL: u32 = 3;
pub const _STL_DISABLED_WARNING_C5053: u32 = 5053;
pub const _CPPLIB_VER: u32 = 650;
pub const _MSVC_STL_VERSION: u32 = 143;
pub const _MSVC_STL_UPDATE: u32 = 202411;
pub const _HAS_STATIC_RTTI: u32 = 1;
pub const _HAS_STD_BYTE: u32 = 1;
pub const _ENFORCE_MATCHING_ALLOCATORS: u32 = 1;
pub const _ENFORCE_FACET_SPECIALIZATIONS: u32 = 0;
pub const _FACET_SPECIALIZATION_MESSAGE : & [u8 ; 167] = b"Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this error.\0" ;
pub const _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS: u32 = 1;
pub const _STD_VECTORIZE_WITH_FLOAT_CONTROL: u32 = 1;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_freestanding_algorithm: u32 = 202311;
pub const __cpp_lib_freestanding_array: u32 = 202311;
pub const __cpp_lib_freestanding_char_traits: u32 = 202306;
pub const __cpp_lib_freestanding_cstdlib: u32 = 202306;
pub const __cpp_lib_freestanding_cstring: u32 = 202311;
pub const __cpp_lib_freestanding_cwchar: u32 = 202306;
pub const __cpp_lib_freestanding_errc: u32 = 202306;
pub const __cpp_lib_freestanding_feature_test_macros: u32 = 202306;
pub const __cpp_lib_freestanding_functional: u32 = 202306;
pub const __cpp_lib_freestanding_iterator: u32 = 202306;
pub const __cpp_lib_freestanding_memory: u32 = 202306;
pub const __cpp_lib_freestanding_operator_new: u32 = 202306;
pub const __cpp_lib_freestanding_ratio: u32 = 202306;
pub const __cpp_lib_freestanding_tuple: u32 = 202306;
pub const __cpp_lib_freestanding_utility: u32 = 202306;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const __cpp_lib_as_const: u32 = 201510;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_invoke: u32 = 201411;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const __cpp_lib_shared_mutex: u32 = 201505;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_any: u32 = 201606;
pub const __cpp_lib_apply: u32 = 201603;
pub const __cpp_lib_atomic_is_always_lock_free: u32 = 201603;
pub const __cpp_lib_boyer_moore_searcher: u32 = 201603;
pub const __cpp_lib_byte: u32 = 201603;
pub const __cpp_lib_clamp: u32 = 201603;
pub const __cpp_lib_filesystem: u32 = 201703;
pub const __cpp_lib_freestanding_charconv: u32 = 202306;
pub const __cpp_lib_freestanding_optional: u32 = 202311;
pub const __cpp_lib_freestanding_string_view: u32 = 202311;
pub const __cpp_lib_freestanding_variant: u32 = 202311;
pub const __cpp_lib_gcd_lcm: u32 = 201606;
pub const __cpp_lib_hardware_interference_size: u32 = 201703;
pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
pub const __cpp_lib_hypot: u32 = 201603;
pub const __cpp_lib_is_aggregate: u32 = 201703;
pub const __cpp_lib_is_invocable: u32 = 201703;
pub const __cpp_lib_is_swappable: u32 = 201603;
pub const __cpp_lib_launder: u32 = 201606;
pub const __cpp_lib_make_from_tuple: u32 = 201606;
pub const __cpp_lib_math_special_functions: u32 = 201603;
pub const __cpp_lib_memory_resource: u32 = 201603;
pub const __cpp_lib_node_extract: u32 = 201606;
pub const __cpp_lib_not_fn: u32 = 201603;
pub const __cpp_lib_parallel_algorithm: u32 = 201603;
pub const __cpp_lib_raw_memory_algorithms: u32 = 201606;
pub const __cpp_lib_sample: u32 = 201603;
pub const __cpp_lib_scoped_lock: u32 = 201703;
pub const __cpp_lib_shared_ptr_weak_type: u32 = 201606;
pub const __cpp_lib_string_view: u32 = 201803;
pub const __cpp_lib_to_chars: u32 = 201611;
pub const __cpp_lib_atomic_value_initialization: u32 = 201911;
pub const __cpp_lib_array_constexpr: u32 = 201803;
pub const __cpp_lib_chrono: u32 = 201611;
pub const __cpp_lib_execution: u32 = 201603;
pub const __cpp_lib_optional: u32 = 201606;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_variant: u32 = 202102;
pub const __cpp_lib_experimental_filesystem: u32 = 201406;
pub const _USE_EXTERN_CXX_EVERYWHERE_FOR_STL: u32 = 0;
pub const _STL_WIN32_WINNT_VISTA: u32 = 1536;
pub const _STL_WIN32_WINNT_WIN7: u32 = 1537;
pub const _STL_WIN32_WINNT_WIN8: u32 = 1538;
pub const _STL_WIN32_WINNT_WIN10: u32 = 2560;
pub const _STL_WIN32_WINNT: u32 = 1537;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 1;
pub const _CRT_HAS_C11: u32 = 0;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _DOMAIN: u32 = 1;
pub const _SING: u32 = 2;
pub const _OVERFLOW: u32 = 3;
pub const _UNDERFLOW: u32 = 4;
pub const _TLOSS: u32 = 5;
pub const _PLOSS: u32 = 6;
pub const _HUGE_ENUF : f64 = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const _DENORM: i32 = -2;
pub const _FINITE: i32 = -1;
pub const _INFCODE: u32 = 1;
pub const _NANCODE: u32 = 2;
pub const FP_INFINITE: u32 = 1;
pub const FP_NAN: u32 = 2;
pub const FP_NORMAL: i32 = -1;
pub const FP_SUBNORMAL: i32 = -2;
pub const FP_ZERO: u32 = 0;
pub const _C2: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: u32 = 2147483647;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const _FE_DIVBYZERO: u32 = 4;
pub const _FE_INEXACT: u32 = 32;
pub const _FE_INVALID: u32 = 1;
pub const _FE_OVERFLOW: u32 = 8;
pub const _FE_UNDERFLOW: u32 = 16;
pub const _D0_C: u32 = 3;
pub const _D1_C: u32 = 2;
pub const _D2_C: u32 = 1;
pub const _D3_C: u32 = 0;
pub const _DBIAS: u32 = 1022;
pub const _DOFF: u32 = 4;
pub const _F0_C: u32 = 1;
pub const _F1_C: u32 = 0;
pub const _FBIAS: u32 = 126;
pub const _FOFF: u32 = 7;
pub const _FRND: u32 = 1;
pub const _L0_C: u32 = 3;
pub const _L1_C: u32 = 2;
pub const _L2_C: u32 = 1;
pub const _L3_C: u32 = 0;
pub const _LBIAS: u32 = 1022;
pub const _LOFF: u32 = 4;
pub const _FP_LT: u32 = 1;
pub const _FP_EQ: u32 = 2;
pub const _FP_GT: u32 = 4;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const WS_EVENT_OPEN: &[u8; 5] = b"open\0";
pub const WS_EVENT_CLOSE: &[u8; 6] = b"close\0";
pub const WS_EVENT_FRAME: &[u8; 6] = b"frame\0";
pub const WS_EVENT_ERROR: &[u8; 6] = b"error\0";
#[doc = "< Status indicates all is OK"]
pub const e_ws_frame_status_status_ok: e_ws_frame_status = 0;
#[doc = "< Status indicates an error occurred"]
pub const e_ws_frame_status_status_error: e_ws_frame_status = 1;
#[doc = "< Status indicates message is not valid"]
pub const e_ws_frame_status_status_invalid_data: e_ws_frame_status = 2;
#[doc = "< Status indicates message is waiting for more information"]
pub const e_ws_frame_status_status_incomplete: e_ws_frame_status = 3;
#[doc = "< Status indicates a message fragment was processed"]
pub const e_ws_frame_status_status_fragment: e_ws_frame_status = 4;
#[doc = "< Status indicates the message is final"]
pub const e_ws_frame_status_status_final: e_ws_frame_status = 5;
pub type e_ws_frame_status = ::std::os::raw::c_uchar;
pub const e_ws_frame_opcode_opcode_continuation: e_ws_frame_opcode = 0;
pub const e_ws_frame_opcode_opcode_text: e_ws_frame_opcode = 1;
pub const e_ws_frame_opcode_opcode_binary: e_ws_frame_opcode = 2;
pub const e_ws_frame_opcode_opcode_rsv1_further_non_control: e_ws_frame_opcode = 3;
pub const e_ws_frame_opcode_opcode_rsv2_further_non_control: e_ws_frame_opcode = 4;
pub const e_ws_frame_opcode_opcode_rsv3_further_non_control: e_ws_frame_opcode = 5;
pub const e_ws_frame_opcode_opcode_rsv4_further_non_control: e_ws_frame_opcode = 6;
pub const e_ws_frame_opcode_opcode_rsv5_further_non_control: e_ws_frame_opcode = 7;
pub const e_ws_frame_opcode_opcode_close: e_ws_frame_opcode = 8;
pub const e_ws_frame_opcode_opcode_ping: e_ws_frame_opcode = 9;
pub const e_ws_frame_opcode_opcode_pong: e_ws_frame_opcode = 10;
pub const e_ws_frame_opcode_opcode_rsv1_further_control: e_ws_frame_opcode = 11;
pub const e_ws_frame_opcode_opcode_rsv2_further_control: e_ws_frame_opcode = 12;
pub const e_ws_frame_opcode_opcode_rsv3_further_control: e_ws_frame_opcode = 13;
pub const e_ws_frame_opcode_opcode_rsv4_further_control: e_ws_frame_opcode = 14;
pub const e_ws_frame_opcode_opcode_rsv5_further_control: e_ws_frame_opcode = 15;
pub type e_ws_frame_opcode = ::std::os::raw::c_uchar;
pub type va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 =
    false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type __vcrt_bool = bool;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const u16,
        _FunctionName: *const u16,
        _FileName: *const u16,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
impl Default for __crt_locale_data_public {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
impl Default for __crt_locale_pointers {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _exception"][::std::mem::size_of::<_exception>() - 40usize];
    ["Alignment of _exception"][::std::mem::align_of::<_exception>() - 8usize];
    ["Offset of field: _exception::type_"][::std::mem::offset_of!(_exception, type_) - 0usize];
    ["Offset of field: _exception::name"][::std::mem::offset_of!(_exception, name) - 8usize];
    ["Offset of field: _exception::arg1"][::std::mem::offset_of!(_exception, arg1) - 16usize];
    ["Offset of field: _exception::arg2"][::std::mem::offset_of!(_exception, arg2) - 24usize];
    ["Offset of field: _exception::retval"][::std::mem::offset_of!(_exception, retval) - 32usize];
};
impl Default for _exception {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _complex {
    pub x: f64,
    pub y: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _complex"][::std::mem::size_of::<_complex>() - 16usize];
    ["Alignment of _complex"][::std::mem::align_of::<_complex>() - 8usize];
    ["Offset of field: _complex::x"][::std::mem::offset_of!(_complex, x) - 0usize];
    ["Offset of field: _complex::y"][::std::mem::offset_of!(_complex, y) - 8usize];
};
pub type float_t = f32;
pub type double_t = f64;
unsafe extern "C" {
    pub static _HUGE: f64;
}
unsafe extern "C" {
    pub fn _fperrraise(_Except: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _dclass(_X: f64) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _ldclass(_X: f64) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _fdclass(_X: f32) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _dsign(_X: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _ldsign(_X: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fdsign(_X: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _dpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _ldpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fdpcomp(_X: f32, _Y: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _dtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _ldtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _fdtest(_Px: *mut f32) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _d_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _ld_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _fd_int(_Px: *mut f32, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _dscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _ldscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _fdscale(_Px: *mut f32, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _dunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _ldunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64)
        -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _fdunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f32)
        -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _dexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _ldexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _fdexp(_Px: *mut f32, _Y: f32, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _dnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _fdnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _dpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn _ldpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn _fdpoly(_X: f32, _Tab: *const f32, _N: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn _dlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn _ldlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn _fdlog(_X: f32, _Baseflag: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn _dsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
unsafe extern "C" {
    pub fn _ldsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
unsafe extern "C" {
    pub fn _fdsin(_X: f32, _Qoff: ::std::os::raw::c_uint) -> f32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _double_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _double_val"][::std::mem::size_of::<_double_val>() - 8usize];
    ["Alignment of _double_val"][::std::mem::align_of::<_double_val>() - 8usize];
    ["Offset of field: _double_val::_Sh"][::std::mem::offset_of!(_double_val, _Sh) - 0usize];
    ["Offset of field: _double_val::_Val"][::std::mem::offset_of!(_double_val, _Val) - 0usize];
};
impl Default for _double_val {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_val {
    pub _Sh: [::std::os::raw::c_ushort; 2usize],
    pub _Val: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _float_val"][::std::mem::size_of::<_float_val>() - 4usize];
    ["Alignment of _float_val"][::std::mem::align_of::<_float_val>() - 4usize];
    ["Offset of field: _float_val::_Sh"][::std::mem::offset_of!(_float_val, _Sh) - 0usize];
    ["Offset of field: _float_val::_Val"][::std::mem::offset_of!(_float_val, _Val) - 0usize];
};
impl Default for _float_val {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ldouble_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ldouble_val"][::std::mem::size_of::<_ldouble_val>() - 8usize];
    ["Alignment of _ldouble_val"][::std::mem::align_of::<_ldouble_val>() - 8usize];
    ["Offset of field: _ldouble_val::_Sh"][::std::mem::offset_of!(_ldouble_val, _Sh) - 0usize];
    ["Offset of field: _ldouble_val::_Val"][::std::mem::offset_of!(_ldouble_val, _Val) - 0usize];
};
impl Default for _ldouble_val {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_const {
    pub _Word: [::std::os::raw::c_ushort; 4usize],
    pub _Float: f32,
    pub _Double: f64,
    pub _Long_double: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _float_const"][::std::mem::size_of::<_float_const>() - 8usize];
    ["Alignment of _float_const"][::std::mem::align_of::<_float_const>() - 8usize];
    ["Offset of field: _float_const::_Word"][::std::mem::offset_of!(_float_const, _Word) - 0usize];
    ["Offset of field: _float_const::_Float"]
        [::std::mem::offset_of!(_float_const, _Float) - 0usize];
    ["Offset of field: _float_const::_Double"]
        [::std::mem::offset_of!(_float_const, _Double) - 0usize];
    ["Offset of field: _float_const::_Long_double"]
        [::std::mem::offset_of!(_float_const, _Long_double) - 0usize];
};
impl Default for _float_const {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub static _Denorm_C: _float_const;
}
unsafe extern "C" {
    pub static _Inf_C: _float_const;
}
unsafe extern "C" {
    pub static _Nan_C: _float_const;
}
unsafe extern "C" {
    pub static _Snan_C: _float_const;
}
unsafe extern "C" {
    pub static _Hugeval_C: _float_const;
}
unsafe extern "C" {
    pub static _FDenorm_C: _float_const;
}
unsafe extern "C" {
    pub static _FInf_C: _float_const;
}
unsafe extern "C" {
    pub static _FNan_C: _float_const;
}
unsafe extern "C" {
    pub static _FSnan_C: _float_const;
}
unsafe extern "C" {
    pub static _LDenorm_C: _float_const;
}
unsafe extern "C" {
    pub static _LInf_C: _float_const;
}
unsafe extern "C" {
    pub static _LNan_C: _float_const;
}
unsafe extern "C" {
    pub static _LSnan_C: _float_const;
}
unsafe extern "C" {
    pub static _Eps_C: _float_const;
}
unsafe extern "C" {
    pub static _Rteps_C: _float_const;
}
unsafe extern "C" {
    pub static _FEps_C: _float_const;
}
unsafe extern "C" {
    pub static _FRteps_C: _float_const;
}
unsafe extern "C" {
    pub static _LEps_C: _float_const;
}
unsafe extern "C" {
    pub static _LRteps_C: _float_const;
}
unsafe extern "C" {
    pub static _Zero_C: f64;
}
unsafe extern "C" {
    pub static _Xbig_C: f64;
}
unsafe extern "C" {
    pub static _FZero_C: f32;
}
unsafe extern "C" {
    pub static _FXbig_C: f32;
}
unsafe extern "C" {
    pub static _LZero_C: f64;
}
unsafe extern "C" {
    pub static _LXbig_C: f64;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _Combined_type {
    pub _address: u8,
}
pub type _Combined_type__Type = f32;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Combined_type_open0_float_double_close0"]
        [::std::mem::size_of::<_Combined_type>() - 1usize];
    ["Align of template specialization: _Combined_type_open0_float_double_close0"]
        [::std::mem::align_of::<_Combined_type>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Combined_type_open0_float_long_double_close0"]
        [::std::mem::size_of::<_Combined_type>() - 1usize];
    ["Align of template specialization: _Combined_type_open0_float_long_double_close0"]
        [::std::mem::align_of::<_Combined_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _Real_widened {
    pub _address: u8,
}
pub type _Real_widened__Type = f64;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_widened_open0_float_float_close0"]
        [::std::mem::size_of::<_Real_widened>() - 1usize];
    ["Align of template specialization: _Real_widened_open0_float_float_close0"]
        [::std::mem::align_of::<_Real_widened>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_widened_open0_float_double_close0"]
        [::std::mem::size_of::<_Real_widened>() - 1usize];
    ["Align of template specialization: _Real_widened_open0_float_double_close0"]
        [::std::mem::align_of::<_Real_widened>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_widened_open0_double_float_close0"]
        [::std::mem::size_of::<_Real_widened>() - 1usize];
    ["Align of template specialization: _Real_widened_open0_double_float_close0"]
        [::std::mem::align_of::<_Real_widened>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_widened_open0_double_double_close0"]
        [::std::mem::size_of::<_Real_widened>() - 1usize];
    ["Align of template specialization: _Real_widened_open0_double_double_close0"]
        [::std::mem::align_of::<_Real_widened>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _Real_type {
    pub _address: u8,
}
pub type _Real_type__Type = f64;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_type_open0_float_close0"]
        [::std::mem::size_of::<_Real_type>() - 1usize];
    ["Align of template specialization: _Real_type_open0_float_close0"]
        [::std::mem::align_of::<_Real_type>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: _Real_type_open0_long_double_close0"]
        [::std::mem::size_of::<_Real_type>() - 1usize];
    ["Align of template specialization: _Real_type_open0_long_double_close0"]
        [::std::mem::align_of::<_Real_type>() - 1usize];
};
unsafe extern "C" {
    pub fn abs(_X: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(_X: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(_X: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn acos(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn asin(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan2(_Y: f64, _X: f64) -> f64;
}
unsafe extern "C" {
    pub fn cos(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn cosh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn fabs(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmod(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn log(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn log10(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn pow(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn sin(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn sqrt(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn tan(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn acosh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn _cabs(_Complex_value: _complex) -> f64;
}
unsafe extern "C" {
    pub fn cbrt(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn ceil(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn copysign(_Number: f64, _Sign: f64) -> f64;
}
unsafe extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
unsafe extern "C" {
    pub fn erf(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfc(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp2(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn fdim(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn floor(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn fma(_X: f64, _Y: f64, _Z: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmax(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmin(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn frexp(_X: f64, _Y: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn hypot(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn _hypot(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn ilogb(_X: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ldexp(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn lgamma(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn llrint(_X: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llround(_X: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn log1p(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn logb(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn lrint(_X: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lround(_X: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _matherr(_Except: *mut _exception) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn modf(_X: f64, _Y: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn nan(_X: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn nearbyint(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextafter(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nexttoward(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn remainder(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn remquo(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn rint(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn round(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalbln(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn scalbn(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn tgamma(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn trunc(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _j0(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _j1(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn _y0(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _y1(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn acoshf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinhf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanhf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn cbrtf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn _chgsignf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn copysignf(_Number: f32, _Sign: f32) -> f32;
}
unsafe extern "C" {
    pub fn _copysignf(_Number: f32, _Sign: f32) -> f32;
}
unsafe extern "C" {
    pub fn erff(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn erfcf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn expm1f(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn exp2f(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn fdimf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaf(_X: f32, _Y: f32, _Z: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaxf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn _hypotf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn ilogbf(_X: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lgammaf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn llrintf(_X: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llroundf(_X: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn log1pf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn log2f(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn logbf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn lrintf(_X: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lroundf(_X: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nanf(_X: *const ::std::os::raw::c_char) -> f32;
}
unsafe extern "C" {
    pub fn nearbyintf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn nextafterf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn nexttowardf(_X: f32, _Y: f64) -> f32;
}
unsafe extern "C" {
    pub fn remainderf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn remquof(_X: f32, _Y: f32, _Z: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn rintf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn roundf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn scalblnf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
unsafe extern "C" {
    pub fn scalbnf(_X: f32, _Y: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn tgammaf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn truncf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn _logbf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn _nextafterf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn _finitef(_X: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isnanf(_X: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fpclassf(_X: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_FMA3_enable(_Flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _get_FMA3_enable() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn atan2f(_Y: f32, _X: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn ceilf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn cosf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn coshf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn expf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn floorf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmodf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn log10f(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn logf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn modff(_X: f32, _Y: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn powf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinhf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn sqrtf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanhf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn acoshl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinhl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanhl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn cbrtl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn copysignl(_Number: f64, _Sign: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfcl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp2l(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1l(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn fdiml(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmal(_X: f64, _Y: f64, _Z: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmaxl(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fminl(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn ilogbl(_X: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lgammal(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn llrintl(_X: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llroundl(_X: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn log1pl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2l(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn logbl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn lrintl(_X: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lroundl(_X: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nanl(_X: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn nearbyintl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextafterl(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nexttowardl(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn remainderl(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn remquol(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn rintl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn roundl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalblnl(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn scalbnl(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn tgammal(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn truncl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub static mut HUGE: f64;
}
unsafe extern "C" {
    pub fn j0(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn j1(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn y0(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn y1(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _callnewh(_Size: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc(_Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: usize,
        _Offset: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type max_align_t = f64;
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
unsafe extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
unsafe extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
unsafe extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
unsafe extern "C" {
    pub fn wcstod(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
}
unsafe extern "C" {
    pub fn _wcstod_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn wcstol(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wcstol_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn wcstoll(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoll_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn wcstoul(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _wcstoul_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn wcstoull(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wcstoull_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstold(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
}
unsafe extern "C" {
    pub fn _wcstold_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn wcstof(_String: *const u16, _EndPtr: *mut *mut u16) -> f32;
}
unsafe extern "C" {
    pub fn _wcstof_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f32;
}
unsafe extern "C" {
    pub fn _wtof(_String: *const u16) -> f64;
}
unsafe extern "C" {
    pub fn _wtof_l(_String: *const u16, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn _wtoi(_String: *const u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtoi_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtol(_String: *const u16) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wtol_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wtoll(_String: *const u16) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wtoll_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
unsafe extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
unsafe extern "C" {
    pub fn _wtoi64(_String: *const u16) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wtoi64_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoi64(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoi64_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoui64(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wcstoui64_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wfullpath(_Buffer: *mut u16, _Path: *const u16, _BufferCount: usize) -> *mut u16;
}
unsafe extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Drive: *const u16,
        _Dir: *const u16,
        _Filename: *const u16,
        _Ext: *const u16,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut u16,
        _Drive: *const u16,
        _Dir: *const u16,
        _Filename: *const u16,
        _Ext: *const u16,
    );
}
unsafe extern "C" {
    pub fn _wperror(_ErrorMessage: *const u16);
}
unsafe extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const u16,
        _Drive: *mut u16,
        _Dir: *mut u16,
        _Filename: *mut u16,
        _Ext: *mut u16,
    );
}
unsafe extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const u16,
        _Drive: *mut u16,
        _DriveCount: usize,
        _Dir: *mut u16,
        _DirCount: usize,
        _Filename: *mut u16,
        _FilenameCount: usize,
        _Ext: *mut u16,
        _ExtCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut u16,
        _BufferCount: *mut usize,
        _VarName: *const u16,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wgetenv(_VarName: *const u16) -> *mut u16;
}
unsafe extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _VarName: *const u16,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wputenv(_EnvString: *const u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wputenv_s(_Name: *const u16, _Value: *const u16) -> errno_t;
}
unsafe extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const u16,
        _VarName: *const u16,
        _Buffer: *mut u16,
        _BufferCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wsearchenv(_Filename: *const u16, _VarName: *const u16, _ResultPath: *mut u16);
}
unsafe extern "C" {
    pub fn _wsystem(_Command: *const u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
unsafe extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const u16,
        arg2: *const u16,
        arg3: *const u16,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
unsafe extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
unsafe extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
unsafe extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut u16;
}
unsafe extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut u16) -> errno_t;
}
unsafe extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _div_t"][::std::mem::size_of::<_div_t>() - 8usize];
    ["Alignment of _div_t"][::std::mem::align_of::<_div_t>() - 4usize];
    ["Offset of field: _div_t::quot"][::std::mem::offset_of!(_div_t, quot) - 0usize];
    ["Offset of field: _div_t::rem"][::std::mem::offset_of!(_div_t, rem) - 4usize];
};
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ldiv_t"][::std::mem::size_of::<_ldiv_t>() - 8usize];
    ["Alignment of _ldiv_t"][::std::mem::align_of::<_ldiv_t>() - 4usize];
    ["Offset of field: _ldiv_t::quot"][::std::mem::offset_of!(_ldiv_t, quot) - 0usize];
    ["Offset of field: _ldiv_t::rem"][::std::mem::offset_of!(_ldiv_t, rem) - 4usize];
};
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _lldiv_t"][::std::mem::size_of::<_lldiv_t>() - 16usize];
    ["Alignment of _lldiv_t"][::std::mem::align_of::<_lldiv_t>() - 8usize];
    ["Offset of field: _lldiv_t::quot"][::std::mem::offset_of!(_lldiv_t, quot) - 0usize];
    ["Offset of field: _lldiv_t::rem"][::std::mem::offset_of!(_lldiv_t, rem) - 8usize];
};
pub type lldiv_t = _lldiv_t;
unsafe extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDOUBLE"][::std::mem::size_of::<_LDOUBLE>() - 10usize];
    ["Alignment of _LDOUBLE"][::std::mem::align_of::<_LDOUBLE>() - 1usize];
    ["Offset of field: _LDOUBLE::ld"][::std::mem::offset_of!(_LDOUBLE, ld) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_DOUBLE"][::std::mem::size_of::<_CRT_DOUBLE>() - 8usize];
    ["Alignment of _CRT_DOUBLE"][::std::mem::align_of::<_CRT_DOUBLE>() - 8usize];
    ["Offset of field: _CRT_DOUBLE::x"][::std::mem::offset_of!(_CRT_DOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_FLOAT"][::std::mem::size_of::<_CRT_FLOAT>() - 4usize];
    ["Alignment of _CRT_FLOAT"][::std::mem::align_of::<_CRT_FLOAT>() - 4usize];
    ["Offset of field: _CRT_FLOAT::f"][::std::mem::offset_of!(_CRT_FLOAT, f) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LONGDOUBLE"][::std::mem::size_of::<_LONGDOUBLE>() - 8usize];
    ["Alignment of _LONGDOUBLE"][::std::mem::align_of::<_LONGDOUBLE>() - 8usize];
    ["Offset of field: _LONGDOUBLE::x"][::std::mem::offset_of!(_LONGDOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDBL12"][::std::mem::size_of::<_LDBL12>() - 12usize];
    ["Alignment of _LDBL12"][::std::mem::align_of::<_LDBL12>() - 1usize];
    ["Offset of field: _LDBL12::ld12"][::std::mem::offset_of!(_LDBL12, ld12) - 0usize];
};
unsafe extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn mbtowc(
        _DstCh: *mut u16,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut u16,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut u16,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn mbstowcs(
        _Dest: *mut u16,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut u16,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut u16,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: u16,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _WCh: u16,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const u16,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const u16,
        _MaxCount: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const u16,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const u16,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: usize,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: usize,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut u16;
}
unsafe extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut u16;
}
unsafe extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
#[doc = "< @brief Operation was successful."]
pub const e_ws_status_status_ok: e_ws_status = 0;
#[doc = "< @brief An error occurred during the operation."]
pub const e_ws_status_status_error: e_ws_status = 1;
#[doc = "< @brief The socket is currently busy."]
pub const e_ws_status_status_busy: e_ws_status = 2;
#[doc = " @enum e_ws_status\n @brief Defines the status codes for WebSocket operations.\n\n This enum represents different status codes that can be returned by\n WebSocket operations to indicate success, error, or a busy state."]
pub type e_ws_status = ::std::os::raw::c_uchar;
#[doc = "< @brief Unsecured mode."]
pub const e_ws_mode_mode_unsecured: e_ws_mode = 0;
#[doc = "< @brief Secured mode (SSL)."]
pub const e_ws_mode_mode_secured: e_ws_mode = 1;
#[doc = " @enum e_ws_mode\n @brief Defines the security mode for WebSocket communication.\n\n This enum is used to set or indicate whether the WebSocket communication\n is secured (SSL/TLS) or unsecured."]
pub type e_ws_mode = ::std::os::raw::c_uchar;
#[doc = "< @brief The endpoint is a server."]
pub const e_ws_endpoint_type_endpoint_server: e_ws_endpoint_type = 0;
#[doc = "< @brief The endpoint is a client."]
pub const e_ws_endpoint_type_endpoint_client: e_ws_endpoint_type = 1;
#[doc = " @enum e_ws_endpoint_type\n @brief Defines the type of WebSocket endpoint.\n\n This enum is used to specify whether the WebSocket endpoint is acting\n as a server or a client."]
pub type e_ws_endpoint_type = ::std::os::raw::c_uchar;
#[doc = "< 1000 indicates a normal closure, meaning that the purpose for which the connection was established has been fulfilled."]
pub const e_ws_closure_status_closure_normal: e_ws_closure_status = 1000;
#[doc = "< 1001 indicates that an endpoint is \"going away\", such as a server going down or a browser having navigated away from a page."]
pub const e_ws_closure_status_closure_going_away: e_ws_closure_status = 1001;
#[doc = "< 1002 indicates that an endpoint is terminating the connection due to a protocol error."]
pub const e_ws_closure_status_closure_protocol_error: e_ws_closure_status = 1002;
#[doc = "< 1003 indicates that an endpoint is terminating the connection because it has received a type of data it cannot accept."]
pub const e_ws_closure_status_closure_unsupported_data: e_ws_closure_status = 1003;
#[doc = "< Reserved for future use."]
pub const e_ws_closure_status_closure_reserved_1004: e_ws_closure_status = 1004;
#[doc = "< 1005 is a reserved value to indicate that no status code was present."]
pub const e_ws_closure_status_closure_no_status_received: e_ws_closure_status = 1005;
#[doc = "< 1006 is reserved to indicate the connection was closed abnormally without sending or receiving a Close control frame."]
pub const e_ws_closure_status_closure_abnormal: e_ws_closure_status = 1006;
#[doc = "< 1007 indicates the connection is terminated due to data inconsistency, e.g., non-UTF-8 data within a text message."]
pub const e_ws_closure_status_closure_invalid_data: e_ws_closure_status = 1007;
#[doc = "< 1008 indicates the connection is terminated due to a policy violation."]
pub const e_ws_closure_status_closure_policy_violation: e_ws_closure_status = 1008;
#[doc = "< 1009 indicates the connection is terminated because the message was too large to process."]
pub const e_ws_closure_status_closure_message_too_big: e_ws_closure_status = 1009;
#[doc = "< 1010 indicates the client terminated the connection due to missing required extensions in the handshake response."]
pub const e_ws_closure_status_closure_missing_extension: e_ws_closure_status = 1010;
#[doc = "< 1011 indicates the server terminated the connection due to an unexpected condition preventing fulfillment of the request."]
pub const e_ws_closure_status_closure_internal_error: e_ws_closure_status = 1011;
#[doc = "< 1015 is reserved to indicate connection closure due to a failed TLS handshake, such as an unverifiable server certificate."]
pub const e_ws_closure_status_closure_tls_handshake_failed: e_ws_closure_status = 1015;
#[doc = " @enum e_ws_closure_status\n @brief RFC6455 Status codes indicating a reason for closure.\n\n This enum defines status codes as defined in RFC6455 to indicate a reason for closure."]
pub type e_ws_closure_status = ::std::os::raw::c_int;
#[doc = " @brief WebSocket extensions configuration structure.\n\n This structure holds configuration parameters for WebSocket extensions."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ws_extensions_t {
    pub permessage_deflate: ws_extensions_t__bindgen_ty_1,
}
#[doc = " @brief Configuration for the \"permessage-deflate\" extension."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ws_extensions_t__bindgen_ty_1 {
    #[doc = " @brief Flag indicating if the permessage-deflate extension is enabled.\n\n Set to `true` if the extension is enabled, otherwise `false`."]
    pub enabled: bool,
    #[doc = " @brief Window size bits for the permessage-deflate extension.\n\n Specifies the window size, where higher values allow for larger\n compression windows and better compression ratios but require more memory."]
    pub window_bits: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ws_extensions_t__bindgen_ty_1"]
        [::std::mem::size_of::<ws_extensions_t__bindgen_ty_1>() - 2usize];
    ["Alignment of ws_extensions_t__bindgen_ty_1"]
        [::std::mem::align_of::<ws_extensions_t__bindgen_ty_1>() - 1usize];
    ["Offset of field: ws_extensions_t__bindgen_ty_1::enabled"]
        [::std::mem::offset_of!(ws_extensions_t__bindgen_ty_1, enabled) - 0usize];
    ["Offset of field: ws_extensions_t__bindgen_ty_1::window_bits"]
        [::std::mem::offset_of!(ws_extensions_t__bindgen_ty_1, window_bits) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ws_extensions_t"][::std::mem::size_of::<ws_extensions_t>() - 2usize];
    ["Alignment of ws_extensions_t"][::std::mem::align_of::<ws_extensions_t>() - 1usize];
    ["Offset of field: ws_extensions_t::permessage_deflate"]
        [::std::mem::offset_of!(ws_extensions_t, permessage_deflate) - 0usize];
};
#[doc = " @struct ws_settings_t\n @brief WebSocket settings\n\n This structure holds various configuration settings for a WebSocket\n connection, including endpoint type, security options, timeouts, and\n SSL/TLS credentials."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ws_settings_t {
    #[doc = "< @brief Type of the WebSocket endpoint (client or server)."]
    pub endpoint: e_ws_endpoint_type,
    #[doc = "< @brief Operation mode (secured or unsecured)."]
    pub mode: e_ws_mode,
    #[doc = "< @brief Read timeout in milliseconds. Defines how long to wait for reading data."]
    pub read_timeout: ::std::os::raw::c_uint,
    #[doc = "< @brief Poll timeout in milliseconds. Defines how long to wait during polling operations."]
    pub poll_timeout: ::std::os::raw::c_uint,
    #[doc = "< @brief Seed for the SSL/TLS random number generator."]
    pub ssl_seed: *mut ::std::os::raw::c_char,
    #[doc = "< @brief CA certificate used for SSL/TLS verification."]
    pub ssl_ca_cert: *mut ::std::os::raw::c_char,
    #[doc = "< @brief Own certificate for the WebSocket connection, used by clients or servers."]
    pub ssl_own_cert: *mut ::std::os::raw::c_char,
    #[doc = "< @brief Private key associated with the own certificate, used for SSL/TLS encryption."]
    pub ssl_private_key: *mut ::std::os::raw::c_char,
    #[doc = "< @brief Maximum number of file descriptors that the WebSocket should manage."]
    pub fd_limit: usize,
    #[doc = "< @brief Hostname or IP address of the WebSocket server. This field must be filled."]
    pub host: *mut ::std::os::raw::c_char,
    #[doc = "< @brief Allowed origin for WebSocket connections (used in CORS scenarios). This field can be NULL."]
    pub allowed_origin: *mut ::std::os::raw::c_char,
    #[doc = "< @brief Interval in milliseconds between WebSocket ping messages to maintain connection."]
    pub ping_interval: ::std::os::raw::c_uint,
    #[doc = "< @brief Timeout in milliseconds to wait for a pong message after sending a ping."]
    pub ping_timeout: ::std::os::raw::c_uint,
    #[doc = "< @brief Message limit in bytes. (default 4mb)"]
    pub message_limit: usize,
    pub auto_mask_frame: bool,
    #[doc = " @brief Enable/Disable automatic frame masking with random generated secret. (default enabled)"]
    pub extensions: ws_extensions_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ws_settings_t"][::std::mem::size_of::<ws_settings_t>() - 96usize];
    ["Alignment of ws_settings_t"][::std::mem::align_of::<ws_settings_t>() - 8usize];
    ["Offset of field: ws_settings_t::endpoint"]
        [::std::mem::offset_of!(ws_settings_t, endpoint) - 0usize];
    ["Offset of field: ws_settings_t::mode"][::std::mem::offset_of!(ws_settings_t, mode) - 1usize];
    ["Offset of field: ws_settings_t::read_timeout"]
        [::std::mem::offset_of!(ws_settings_t, read_timeout) - 4usize];
    ["Offset of field: ws_settings_t::poll_timeout"]
        [::std::mem::offset_of!(ws_settings_t, poll_timeout) - 8usize];
    ["Offset of field: ws_settings_t::ssl_seed"]
        [::std::mem::offset_of!(ws_settings_t, ssl_seed) - 16usize];
    ["Offset of field: ws_settings_t::ssl_ca_cert"]
        [::std::mem::offset_of!(ws_settings_t, ssl_ca_cert) - 24usize];
    ["Offset of field: ws_settings_t::ssl_own_cert"]
        [::std::mem::offset_of!(ws_settings_t, ssl_own_cert) - 32usize];
    ["Offset of field: ws_settings_t::ssl_private_key"]
        [::std::mem::offset_of!(ws_settings_t, ssl_private_key) - 40usize];
    ["Offset of field: ws_settings_t::fd_limit"]
        [::std::mem::offset_of!(ws_settings_t, fd_limit) - 48usize];
    ["Offset of field: ws_settings_t::host"][::std::mem::offset_of!(ws_settings_t, host) - 56usize];
    ["Offset of field: ws_settings_t::allowed_origin"]
        [::std::mem::offset_of!(ws_settings_t, allowed_origin) - 64usize];
    ["Offset of field: ws_settings_t::ping_interval"]
        [::std::mem::offset_of!(ws_settings_t, ping_interval) - 72usize];
    ["Offset of field: ws_settings_t::ping_timeout"]
        [::std::mem::offset_of!(ws_settings_t, ping_timeout) - 76usize];
    ["Offset of field: ws_settings_t::message_limit"]
        [::std::mem::offset_of!(ws_settings_t, message_limit) - 80usize];
    ["Offset of field: ws_settings_t::auto_mask_frame"]
        [::std::mem::offset_of!(ws_settings_t, auto_mask_frame) - 88usize];
    ["Offset of field: ws_settings_t::extensions"]
        [::std::mem::offset_of!(ws_settings_t, extensions) - 89usize];
};
impl Default for ws_settings_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn websocket_create() -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn websocket_setup(
        ctx: *mut ::std::os::raw::c_void,
        settings: *const ws_settings_t,
    ) -> e_ws_status;
}
unsafe extern "C" {
    pub fn websocket_bind(
        ctx: *mut ::std::os::raw::c_void,
        bind_ip: *const ::std::os::raw::c_char,
        bind_port: *const ::std::os::raw::c_char,
        out_fd: *mut ::std::os::raw::c_int,
    ) -> e_ws_status;
}
unsafe extern "C" {
    pub fn websocket_open(
        ctx: *mut ::std::os::raw::c_void,
        host_ip: *const ::std::os::raw::c_char,
        host_port: *const ::std::os::raw::c_char,
        out_fd: *mut ::std::os::raw::c_int,
    ) -> e_ws_status;
}
unsafe extern "C" {
    pub fn websocket_on(
        ctx: *mut ::std::os::raw::c_void,
        event_name: *const ::std::os::raw::c_char,
        callback: *mut ::std::os::raw::c_void,
    ) -> e_ws_status;
}
unsafe extern "C" {
    pub fn websocket_operate(ctx: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    pub fn websocket_destroy(ctx: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn websocket_frame_create(opcode: e_ws_frame_opcode) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn websocket_frame_mask(ctx: *mut ::std::os::raw::c_void, key: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn websocket_frame_push(
        ctx: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_uchar,
        size: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn websocket_frame_flush(ctx: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn websocket_frame_emit(
        ctx: *mut ::std::os::raw::c_void,
        fd: ::std::os::raw::c_int,
        frame: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    pub fn websocket_frame_destroy(ctx: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn websocket_close(ctx: *mut ::std::os::raw::c_void, fd: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
